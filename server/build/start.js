// File: server/src/start.ts
import Fastify from 'fastify';
import fs from 'fs';
import path from 'path';
import { env } from './config/env.js';
import { registerAuth } from './config/auth.js';
import { registerGlobalErrorHandler } from './services/errorHandler.js';
import { registerRoutes } from './routes/index.js';
import { registerSecurityMiddleware } from './config/security.js';
import { startCronJobs } from './services/scheduler.js';
fs.mkdirSync(env.LOG_DIR, { recursive: true });
const logFilePath = path.join(env.LOG_DIR, 'shoutshack.log');
export const fastify = Fastify({
    logger: {
        level: env.LOG_LEVEL || 'info',
        transport: {
            targets: [
                {
                    target: 'pino/file',
                    options: { destination: logFilePath, mkdir: true }
                },
                {
                    target: 'pino-pretty',
                    options: { colorize: true, translateTime: 'SYS:standard' }
                }
            ]
        }
    }
});
// override console methods to use Fastify's logger
console.log = (...args) => fastify.log.info(args.join(' '));
console.warn = (...args) => fastify.log.warn(args.join(' '));
console.error = (...args) => fastify.log.error(args.join(' '));
console.debug = (...args) => fastify.log.debug(args.join(' '));
const start = async () => {
    try {
        registerSecurityMiddleware(fastify);
        registerAuth(fastify);
        registerRoutes(fastify);
        registerGlobalErrorHandler(fastify);
        await fastify.listen({ port: env.SERVER_PORT, host: env.SERVER_HOST });
        console.log(`Server running at http://${env.SERVER_HOST}:${env.SERVER_PORT}/`);
        import('./tasks/index.js').then(({ registerTasks }) => {
            registerTasks();
            startCronJobs();
        });
    }
    catch (err) {
        console.error('Server startup failed:', err);
        process.exit(1);
    }
};
start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEJBQTRCO0FBRTVCLE9BQU8sT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV4RCxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUvQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzlCLE1BQU0sRUFBRTtRQUNQLEtBQUssRUFBRSxHQUFHLENBQUMsU0FBUyxJQUFJLE1BQU07UUFDOUIsU0FBUyxFQUFFO1lBQ1YsT0FBTyxFQUFFO2dCQUNSO29CQUNDLE1BQU0sRUFBRSxXQUFXO29CQUNuQixPQUFPLEVBQUUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7aUJBQ2xEO2dCQUNEO29CQUNDLE1BQU0sRUFBRSxhQUFhO29CQUNyQixPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUU7aUJBQzFEO2FBQ0Q7U0FDRDtLQUNEO0NBQ0QsQ0FBQyxDQUFDO0FBRUgsbURBQW1EO0FBQ25ELE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVELE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQy9ELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRS9ELE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3hCLElBQUksQ0FBQztRQUNKLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEIsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEMsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRXZFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFFL0UsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ3JELGFBQWEsRUFBRSxDQUFDO1lBQ2hCLGFBQWEsRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakIsQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVGLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc2VydmVyL3NyYy9zdGFydC50c1xuXG5pbXBvcnQgRmFzdGlmeSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGVudiB9IGZyb20gJy4vY29uZmlnL2Vudi5qcyc7XG5pbXBvcnQgeyByZWdpc3RlckF1dGggfSBmcm9tICcuL2NvbmZpZy9hdXRoLmpzJztcbmltcG9ydCB7IHJlZ2lzdGVyR2xvYmFsRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9zZXJ2aWNlcy9lcnJvckhhbmRsZXIuanMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyByZWdpc3RlclNlY3VyaXR5TWlkZGxld2FyZSB9IGZyb20gJy4vY29uZmlnL3NlY3VyaXR5LmpzJztcbmltcG9ydCB7IHN0YXJ0Q3JvbkpvYnMgfSBmcm9tICcuL3NlcnZpY2VzL3NjaGVkdWxlci5qcyc7XG5cbmZzLm1rZGlyU3luYyhlbnYuTE9HX0RJUiwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG5cbmNvbnN0IGxvZ0ZpbGVQYXRoID0gcGF0aC5qb2luKGVudi5MT0dfRElSLCAnc2hvdXRzaGFjay5sb2cnKTtcblxuZXhwb3J0IGNvbnN0IGZhc3RpZnkgPSBGYXN0aWZ5KHtcblx0bG9nZ2VyOiB7XG5cdFx0bGV2ZWw6IGVudi5MT0dfTEVWRUwgfHwgJ2luZm8nLFxuXHRcdHRyYW5zcG9ydDoge1xuXHRcdFx0dGFyZ2V0czogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFyZ2V0OiAncGluby9maWxlJyxcblx0XHRcdFx0XHRvcHRpb25zOiB7IGRlc3RpbmF0aW9uOiBsb2dGaWxlUGF0aCwgbWtkaXI6IHRydWUgfVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFyZ2V0OiAncGluby1wcmV0dHknLFxuXHRcdFx0XHRcdG9wdGlvbnM6IHsgY29sb3JpemU6IHRydWUsIHRyYW5zbGF0ZVRpbWU6ICdTWVM6c3RhbmRhcmQnIH1cblx0XHRcdFx0fVxuXHRcdFx0XVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIG92ZXJyaWRlIGNvbnNvbGUgbWV0aG9kcyB0byB1c2UgRmFzdGlmeSdzIGxvZ2dlclxuY29uc29sZS5sb2cgPSAoLi4uYXJncykgPT4gZmFzdGlmeS5sb2cuaW5mbyhhcmdzLmpvaW4oJyAnKSk7XG5jb25zb2xlLndhcm4gPSAoLi4uYXJncykgPT4gZmFzdGlmeS5sb2cud2FybihhcmdzLmpvaW4oJyAnKSk7XG5jb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IGZhc3RpZnkubG9nLmVycm9yKGFyZ3Muam9pbignICcpKTtcbmNvbnNvbGUuZGVidWcgPSAoLi4uYXJncykgPT4gZmFzdGlmeS5sb2cuZGVidWcoYXJncy5qb2luKCcgJykpO1xuXG5jb25zdCBzdGFydCA9IGFzeW5jICgpID0+IHtcblx0dHJ5IHtcblx0XHRyZWdpc3RlclNlY3VyaXR5TWlkZGxld2FyZShmYXN0aWZ5KTtcblx0XHRyZWdpc3RlckF1dGgoZmFzdGlmeSk7XG5cdFx0cmVnaXN0ZXJSb3V0ZXMoZmFzdGlmeSk7XG5cdFx0cmVnaXN0ZXJHbG9iYWxFcnJvckhhbmRsZXIoZmFzdGlmeSk7XG5cblx0XHRhd2FpdCBmYXN0aWZ5Lmxpc3Rlbih7IHBvcnQ6IGVudi5TRVJWRVJfUE9SVCwgaG9zdDogZW52LlNFUlZFUl9IT1NUIH0pO1xuXG5cdFx0Y29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIGF0IGh0dHA6Ly8ke2Vudi5TRVJWRVJfSE9TVH06JHtlbnYuU0VSVkVSX1BPUlR9L2ApO1xuXG5cdFx0aW1wb3J0KCcuL3Rhc2tzL2luZGV4LmpzJykudGhlbigoeyByZWdpc3RlclRhc2tzIH0pID0+IHtcblx0XHRcdHJlZ2lzdGVyVGFza3MoKTtcblx0XHRcdHN0YXJ0Q3JvbkpvYnMoKTtcblx0XHR9KTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc29sZS5lcnJvcignU2VydmVyIHN0YXJ0dXAgZmFpbGVkOicsIGVycik7XG5cblx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdH1cbn07XG5cbnN0YXJ0KCk7XG4iXX0=