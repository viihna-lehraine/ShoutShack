import fs from 'fs';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const envPaths = [
    path.resolve(__dirname, '../../conf/.env'), // when running compiled JS from 'build/'
    path.resolve(__dirname, '../../../conf/.env'), // when running via ts-node from 'src/'
    path.resolve(process.cwd(), 'server/conf/.env') // absolute fallback
];
const ENV_PATH = envPaths.find(fs.existsSync);
if (ENV_PATH) {
    console.log(`Loading environment variables from ${ENV_PATH}`);
    dotenv.config({ path: ENV_PATH });
}
else {
    throw new Error(`The .env file could not be found in any of its expected locations!`);
}
const parseNumber = (value, defaultValue) => {
    if (!value)
        return defaultValue;
    const parsed = parseInt(value, 10);
    if (isNaN(parsed)) {
        console.warn(`Invalid number for environment variable! Using default value ${defaultValue}`);
        return defaultValue;
    }
    return parsed;
};
export const env = {
    POSTGRES_DB: process.env.POSTGRES_DB,
    POSTGRES_HOST: process.env.POSTGRES_HOST,
    POSTGRES_PASSWORD: process.env.POSTGRES_PASSWORD,
    POSTGRES_PORT: parseNumber(process.env.POSTGRES_PORT, 5432),
    POSTGRES_USER: process.env.POSTGRES_USER,
    SERVER_HOST: process.env.SERVER_HOST || '0.0.0.0',
    SERVER_PORT: parseNumber(process.env.SERVER_PORT, 3000)
};
console.log('Loaded environment variables:', env);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9lbnYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTNDLE1BQU0sUUFBUSxHQUFHO0lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLEVBQUUseUNBQXlDO0lBQ3JGLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLG9CQUFvQixDQUFDLEVBQUUsdUNBQXVDO0lBQ3RGLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGtCQUFrQixDQUFDLENBQUMsb0JBQW9CO0NBQ3BFLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU5QyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDbkMsQ0FBQztLQUFNLENBQUM7SUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBeUIsRUFBRSxZQUFvQixFQUFVLEVBQUU7SUFDL0UsSUFBSSxDQUFDLEtBQUs7UUFBRSxPQUFPLFlBQVksQ0FBQztJQUNoQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDbkIsT0FBTyxDQUFDLElBQUksQ0FDWCxnRUFBZ0UsWUFBWSxFQUFFLENBQzlFLENBQUM7UUFDRixPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUc7SUFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztJQUNwQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO0lBQ3hDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO0lBQ2hELGFBQWEsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0lBQzNELGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWE7SUFDeEMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLFNBQVM7SUFDakQsV0FBVyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM7Q0FDdkQsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLEVBQUUsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuY29uc3QgZW52UGF0aHMgPSBbXG5cdHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9jb25mLy5lbnYnKSwgLy8gd2hlbiBydW5uaW5nIGNvbXBpbGVkIEpTIGZyb20gJ2J1aWxkLydcblx0cGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL2NvbmYvLmVudicpLCAvLyB3aGVuIHJ1bm5pbmcgdmlhIHRzLW5vZGUgZnJvbSAnc3JjLydcblx0cGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICdzZXJ2ZXIvY29uZi8uZW52JykgLy8gYWJzb2x1dGUgZmFsbGJhY2tcbl07XG5cbmNvbnN0IEVOVl9QQVRIID0gZW52UGF0aHMuZmluZChmcy5leGlzdHNTeW5jKTtcblxuaWYgKEVOVl9QQVRIKSB7XG5cdGNvbnNvbGUubG9nKGBMb2FkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tICR7RU5WX1BBVEh9YCk7XG5cdGRvdGVudi5jb25maWcoeyBwYXRoOiBFTlZfUEFUSCB9KTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihgVGhlIC5lbnYgZmlsZSBjb3VsZCBub3QgYmUgZm91bmQgaW4gYW55IG9mIGl0cyBleHBlY3RlZCBsb2NhdGlvbnMhYCk7XG59XG5cbmNvbnN0IHBhcnNlTnVtYmVyID0gKHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGRlZmF1bHRWYWx1ZTogbnVtYmVyKTogbnVtYmVyID0+IHtcblx0aWYgKCF2YWx1ZSkgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcblx0Y29uc3QgcGFyc2VkID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcblxuXHRpZiAoaXNOYU4ocGFyc2VkKSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdGBJbnZhbGlkIG51bWJlciBmb3IgZW52aXJvbm1lbnQgdmFyaWFibGUhIFVzaW5nIGRlZmF1bHQgdmFsdWUgJHtkZWZhdWx0VmFsdWV9YFxuXHRcdCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRWYWx1ZTtcblx0fVxuXG5cdHJldHVybiBwYXJzZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgZW52ID0ge1xuXHRQT1NUR1JFU19EQjogcHJvY2Vzcy5lbnYuUE9TVEdSRVNfREIsXG5cdFBPU1RHUkVTX0hPU1Q6IHByb2Nlc3MuZW52LlBPU1RHUkVTX0hPU1QsXG5cdFBPU1RHUkVTX1BBU1NXT1JEOiBwcm9jZXNzLmVudi5QT1NUR1JFU19QQVNTV09SRCxcblx0UE9TVEdSRVNfUE9SVDogcGFyc2VOdW1iZXIocHJvY2Vzcy5lbnYuUE9TVEdSRVNfUE9SVCwgNTQzMiksXG5cdFBPU1RHUkVTX1VTRVI6IHByb2Nlc3MuZW52LlBPU1RHUkVTX1VTRVIsXG5cdFNFUlZFUl9IT1NUOiBwcm9jZXNzLmVudi5TRVJWRVJfSE9TVCB8fCAnMC4wLjAuMCcsXG5cdFNFUlZFUl9QT1JUOiBwYXJzZU51bWJlcihwcm9jZXNzLmVudi5TRVJWRVJfUE9SVCwgMzAwMClcbn07XG5cbmNvbnNvbGUubG9nKCdMb2FkZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzOicsIGVudik7XG4iXX0=