// File: server/src/controllers/Auth.ts
import { dbClientPromise } from '../db/main.js';
export class AuthController {
    static async signup(request, reply) {
        const { username, password } = request.body;
        const client = await dbClientPromise;
        const existingUser = await client.query('SELECT * FROM users WHERE username = $1', [
            username
        ]);
        if (existingUser.rowCount ?? 0) {
            return reply.status(400).send({ error: 'User already exists' });
        }
        const hashedPassword = await request.server.hashPassword(password);
        await client.query('INSERT INTO users (username, password_hash) VALUES ($1, $2)', [
            username,
            hashedPassword
        ]);
        reply.send({ message: 'User created successfully' });
    }
    static async login(request, reply) {
        const { username, password } = request.body;
        const client = await dbClientPromise;
        const user = await client.query('SELECT * FROM users WHERE username = $1', [username]);
        if (user.rowCount === 0) {
            return reply.status(401).send({ error: 'Invalid username or password' });
        }
        const isValid = await request.server.verifyPassword(password, user.rows[0].password_hash);
        if (!isValid) {
            return reply.status(401).send({ error: 'Invalid username or password' });
        }
        const token = request.server.jwt.sign({ userId: user.rows[0].id });
        reply.send({ message: 'Login successful', token });
    }
    static async getProfile(request, reply) {
        const userId = request.user.userId;
        const client = await dbClientPromise;
        const user = await client.query('SELECT username, email FROM users WHERE id = $1', [
            userId
        ]);
        if (user.rowCount === 0) {
            return reply.status(404).send({ error: 'User not found' });
        }
        reply.send(user.rows[0]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9BdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1QztBQUd2QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhELE1BQU0sT0FBTyxjQUFjO0lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQXVCLEVBQUUsS0FBbUI7UUFDL0QsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBOEMsQ0FBQztRQUN0RixNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQWUsQ0FBQztRQUNyQyxNQUFNLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMseUNBQXlDLEVBQUU7WUFDbEYsUUFBUTtTQUNSLENBQUMsQ0FBQztRQUVILElBQUksWUFBWSxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNoQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztRQUNqRSxDQUFDO1FBRUQsTUFBTSxjQUFjLEdBQUcsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVuRSxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUU7WUFDakYsUUFBUTtZQUNSLGNBQWM7U0FDZCxDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBdUIsRUFBRSxLQUFtQjtRQUM5RCxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUE4QyxDQUFDO1FBQ3RGLE1BQU0sTUFBTSxHQUFHLE1BQU0sZUFBZSxDQUFDO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFdkYsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsOEJBQThCLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsOEJBQThCLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFFRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBdUIsRUFBRSxLQUFtQjtRQUNuRSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQWUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsaURBQWlELEVBQUU7WUFDbEYsTUFBTTtTQUNOLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUM1RCxDQUFDO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc2VydmVyL3NyYy9jb250cm9sbGVycy9BdXRoLnRzXG5cbmltcG9ydCB7IEZhc3RpZnlSZXBseSwgRmFzdGlmeVJlcXVlc3QgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCB7IGRiQ2xpZW50UHJvbWlzZSB9IGZyb20gJy4uL2RiL21haW4uanMnO1xuXG5leHBvcnQgY2xhc3MgQXV0aENvbnRyb2xsZXIge1xuXHRzdGF0aWMgYXN5bmMgc2lnbnVwKHJlcXVlc3Q6IEZhc3RpZnlSZXF1ZXN0LCByZXBseTogRmFzdGlmeVJlcGx5KSB7XG5cdFx0Y29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQgfSA9IHJlcXVlc3QuYm9keSBhcyB7IHVzZXJuYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfTtcblx0XHRjb25zdCBjbGllbnQgPSBhd2FpdCBkYkNsaWVudFByb21pc2U7XG5cdFx0Y29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgY2xpZW50LnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJDEnLCBbXG5cdFx0XHR1c2VybmFtZVxuXHRcdF0pO1xuXG5cdFx0aWYgKGV4aXN0aW5nVXNlci5yb3dDb3VudCA/PyAwKSB7XG5cdFx0XHRyZXR1cm4gcmVwbHkuc3RhdHVzKDQwMCkuc2VuZCh7IGVycm9yOiAnVXNlciBhbHJlYWR5IGV4aXN0cycgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCByZXF1ZXN0LnNlcnZlci5oYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuXG5cdFx0YXdhaXQgY2xpZW50LnF1ZXJ5KCdJTlNFUlQgSU5UTyB1c2VycyAodXNlcm5hbWUsIHBhc3N3b3JkX2hhc2gpIFZBTFVFUyAoJDEsICQyKScsIFtcblx0XHRcdHVzZXJuYW1lLFxuXHRcdFx0aGFzaGVkUGFzc3dvcmRcblx0XHRdKTtcblxuXHRcdHJlcGx5LnNlbmQoeyBtZXNzYWdlOiAnVXNlciBjcmVhdGVkIHN1Y2Nlc3NmdWxseScgfSk7XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgbG9naW4ocmVxdWVzdDogRmFzdGlmeVJlcXVlc3QsIHJlcGx5OiBGYXN0aWZ5UmVwbHkpIHtcblx0XHRjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxdWVzdC5ib2R5IGFzIHsgdXNlcm5hbWU6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9O1xuXHRcdGNvbnN0IGNsaWVudCA9IGF3YWl0IGRiQ2xpZW50UHJvbWlzZTtcblx0XHRjb25zdCB1c2VyID0gYXdhaXQgY2xpZW50LnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJDEnLCBbdXNlcm5hbWVdKTtcblxuXHRcdGlmICh1c2VyLnJvd0NvdW50ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gcmVwbHkuc3RhdHVzKDQwMSkuc2VuZCh7IGVycm9yOiAnSW52YWxpZCB1c2VybmFtZSBvciBwYXNzd29yZCcgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaXNWYWxpZCA9IGF3YWl0IHJlcXVlc3Quc2VydmVyLnZlcmlmeVBhc3N3b3JkKHBhc3N3b3JkLCB1c2VyLnJvd3NbMF0ucGFzc3dvcmRfaGFzaCk7XG5cblx0XHRpZiAoIWlzVmFsaWQpIHtcblx0XHRcdHJldHVybiByZXBseS5zdGF0dXMoNDAxKS5zZW5kKHsgZXJyb3I6ICdJbnZhbGlkIHVzZXJuYW1lIG9yIHBhc3N3b3JkJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCB0b2tlbiA9IHJlcXVlc3Quc2VydmVyLmp3dC5zaWduKHsgdXNlcklkOiB1c2VyLnJvd3NbMF0uaWQgfSk7XG5cblx0XHRyZXBseS5zZW5kKHsgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwnLCB0b2tlbiB9KTtcblx0fVxuXG5cdHN0YXRpYyBhc3luYyBnZXRQcm9maWxlKHJlcXVlc3Q6IEZhc3RpZnlSZXF1ZXN0LCByZXBseTogRmFzdGlmeVJlcGx5KSB7XG5cdFx0Y29uc3QgdXNlcklkID0gcmVxdWVzdC51c2VyLnVzZXJJZDtcblx0XHRjb25zdCBjbGllbnQgPSBhd2FpdCBkYkNsaWVudFByb21pc2U7XG5cdFx0Y29uc3QgdXNlciA9IGF3YWl0IGNsaWVudC5xdWVyeSgnU0VMRUNUIHVzZXJuYW1lLCBlbWFpbCBGUk9NIHVzZXJzIFdIRVJFIGlkID0gJDEnLCBbXG5cdFx0XHR1c2VySWRcblx0XHRdKTtcblxuXHRcdGlmICh1c2VyLnJvd0NvdW50ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gcmVwbHkuc3RhdHVzKDQwNCkuc2VuZCh7IGVycm9yOiAnVXNlciBub3QgZm91bmQnIH0pO1xuXHRcdH1cblxuXHRcdHJlcGx5LnNlbmQodXNlci5yb3dzWzBdKTtcblx0fVxufVxuIl19