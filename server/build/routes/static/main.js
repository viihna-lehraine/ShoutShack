// File: server/src/routes/static/main.ts
import path from 'path';
export const registerStaticRoutes = (fastify) => {
    fastify.register(import('@fastify/static'), {
        root: '/usr/share/nginx/html',
        prefix: '/',
        decorateReply: false // prevents modification of response headers
    });
    fastify.get('/admin/*', async (request, reply) => {
        const filePath = request.params['*'];
        return reply.sendFile(filePath, path.join('/usr/share/nginx/html/admin'));
    });
    fastify.get('/docs/*', async (request, reply) => {
        const filePath = request.params['*'];
        return reply.sendFile(filePath, path.join('/usr/share/nginx/docs'));
    });
    fastify.get('/public/*', async (request, reply) => {
        const filePath = request.params['*'];
        return reply.sendFile(filePath, path.join('/usr/share/nginx/public/assets'));
    });
    fastify.get('/uploads/*', async (request, reply) => {
        const filePath = request.params['*'];
        const uploadPath = path.join('/var/www/shoutshack/uploads', filePath);
        if (process.env.ALLOW_UPLOADS !== 'true') {
            return reply.code(403).send('Uploads are disabled.');
        }
        return reply.sendFile(uploadPath);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc3RhdGljL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBSXpDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtJQUNoRSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQzNDLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLEdBQUc7UUFDWCxhQUFhLEVBQUUsS0FBSyxDQUFDLDRDQUE0QztLQUNqRSxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUEyQixVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMxRSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUEyQixTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN6RSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUEyQixXQUFXLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMzRSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUEyQixZQUFZLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUM1RSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdEUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMxQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNlcnZlci9zcmMvcm91dGVzL3N0YXRpYy9tYWluLnRzXG5cbmltcG9ydCB7IFN0YXRpY1BhcmFtcyB9IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlclN0YXRpY1JvdXRlcyA9IChmYXN0aWZ5OiBGYXN0aWZ5SW5zdGFuY2UpID0+IHtcblx0ZmFzdGlmeS5yZWdpc3RlcihpbXBvcnQoJ0BmYXN0aWZ5L3N0YXRpYycpLCB7XG5cdFx0cm9vdDogJy91c3Ivc2hhcmUvbmdpbngvaHRtbCcsXG5cdFx0cHJlZml4OiAnLycsXG5cdFx0ZGVjb3JhdGVSZXBseTogZmFsc2UgLy8gcHJldmVudHMgbW9kaWZpY2F0aW9uIG9mIHJlc3BvbnNlIGhlYWRlcnNcblx0fSk7XG5cblx0ZmFzdGlmeS5nZXQ8eyBQYXJhbXM6IFN0YXRpY1BhcmFtcyB9PignL2FkbWluLyonLCBhc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcblx0XHRjb25zdCBmaWxlUGF0aCA9IHJlcXVlc3QucGFyYW1zWycqJ107XG5cdFx0cmV0dXJuIHJlcGx5LnNlbmRGaWxlKGZpbGVQYXRoLCBwYXRoLmpvaW4oJy91c3Ivc2hhcmUvbmdpbngvaHRtbC9hZG1pbicpKTtcblx0fSk7XG5cblx0ZmFzdGlmeS5nZXQ8eyBQYXJhbXM6IFN0YXRpY1BhcmFtcyB9PignL2RvY3MvKicsIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuXHRcdGNvbnN0IGZpbGVQYXRoID0gcmVxdWVzdC5wYXJhbXNbJyonXTtcblx0XHRyZXR1cm4gcmVwbHkuc2VuZEZpbGUoZmlsZVBhdGgsIHBhdGguam9pbignL3Vzci9zaGFyZS9uZ2lueC9kb2NzJykpO1xuXHR9KTtcblxuXHRmYXN0aWZ5LmdldDx7IFBhcmFtczogU3RhdGljUGFyYW1zIH0+KCcvcHVibGljLyonLCBhc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcblx0XHRjb25zdCBmaWxlUGF0aCA9IHJlcXVlc3QucGFyYW1zWycqJ107XG5cdFx0cmV0dXJuIHJlcGx5LnNlbmRGaWxlKGZpbGVQYXRoLCBwYXRoLmpvaW4oJy91c3Ivc2hhcmUvbmdpbngvcHVibGljL2Fzc2V0cycpKTtcblx0fSk7XG5cblx0ZmFzdGlmeS5nZXQ8eyBQYXJhbXM6IFN0YXRpY1BhcmFtcyB9PignL3VwbG9hZHMvKicsIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuXHRcdGNvbnN0IGZpbGVQYXRoID0gcmVxdWVzdC5wYXJhbXNbJyonXTtcblx0XHRjb25zdCB1cGxvYWRQYXRoID0gcGF0aC5qb2luKCcvdmFyL3d3dy9zaG91dHNoYWNrL3VwbG9hZHMnLCBmaWxlUGF0aCk7XG5cblx0XHRpZiAocHJvY2Vzcy5lbnYuQUxMT1dfVVBMT0FEUyAhPT0gJ3RydWUnKSB7XG5cdFx0XHRyZXR1cm4gcmVwbHkuY29kZSg0MDMpLnNlbmQoJ1VwbG9hZHMgYXJlIGRpc2FibGVkLicpO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXBseS5zZW5kRmlsZSh1cGxvYWRQYXRoKTtcblx0fSk7XG59O1xuIl19