// File: server/src/common/main.ts
const parseBoolean = (value) => {
    if (!value)
        throw new Error('Missing required boolean environment variable!');
    const normalized = value.trim().toLowerCase();
    if (['true', 't', '1', 'yes', 'on'].includes(normalized))
        return true;
    if (['false', 'f', '0', 'no', 'off'].includes(normalized))
        return false;
    throw new Error(`Invalid boolean for environment variable! Value: "${value}"`);
};
const parseNumber = (value) => {
    if (!value)
        throw new Error('Missing required number environment variable!');
    const parsed = parseInt(value, 10);
    if (isNaN(parsed)) {
        throw new Error(`Invalid number for environment variable! Value: "${value}"`);
    }
    return parsed;
};
const parseString = (value, envVarName) => {
    if (!value)
        throw new Error(`Missing required environment variable: ${envVarName}`);
    return value;
};
export const utils = {
    parseBoolean,
    parseNumber,
    parseString
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFJbEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUF5QixFQUFXLEVBQUU7SUFDM0QsSUFBSSxDQUFDLEtBQUs7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7SUFDOUUsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTlDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3RFLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXhFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUF5QixFQUFVLEVBQUU7SUFDekQsSUFBSSxDQUFDLEtBQUs7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDN0UsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVuQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELEtBQUssR0FBRyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUF5QixFQUFFLFVBQWtCLEVBQVUsRUFBRTtJQUM3RSxJQUFJLENBQUMsS0FBSztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDcEYsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQWM7SUFDL0IsWUFBWTtJQUNaLFdBQVc7SUFDWCxXQUFXO0NBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNlcnZlci9zcmMvY29tbW9uL21haW4udHNcblxuaW1wb3J0IHsgVXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuXG5jb25zdCBwYXJzZUJvb2xlYW4gPSAodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IGJvb2xlYW4gPT4ge1xuXHRpZiAoIXZhbHVlKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgYm9vbGVhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSEnKTtcblx0Y29uc3Qgbm9ybWFsaXplZCA9IHZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG5cdGlmIChbJ3RydWUnLCAndCcsICcxJywgJ3llcycsICdvbiddLmluY2x1ZGVzKG5vcm1hbGl6ZWQpKSByZXR1cm4gdHJ1ZTtcblx0aWYgKFsnZmFsc2UnLCAnZicsICcwJywgJ25vJywgJ29mZiddLmluY2x1ZGVzKG5vcm1hbGl6ZWQpKSByZXR1cm4gZmFsc2U7XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJvb2xlYW4gZm9yIGVudmlyb25tZW50IHZhcmlhYmxlISBWYWx1ZTogXCIke3ZhbHVlfVwiYCk7XG59O1xuXG5jb25zdCBwYXJzZU51bWJlciA9ICh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogbnVtYmVyID0+IHtcblx0aWYgKCF2YWx1ZSkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIG51bWJlciBlbnZpcm9ubWVudCB2YXJpYWJsZSEnKTtcblx0Y29uc3QgcGFyc2VkID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcblxuXHRpZiAoaXNOYU4ocGFyc2VkKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBudW1iZXIgZm9yIGVudmlyb25tZW50IHZhcmlhYmxlISBWYWx1ZTogXCIke3ZhbHVlfVwiYCk7XG5cdH1cblxuXHRyZXR1cm4gcGFyc2VkO1xufTtcblxuY29uc3QgcGFyc2VTdHJpbmcgPSAodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgZW52VmFyTmFtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcblx0aWYgKCF2YWx1ZSkgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlOiAke2VudlZhck5hbWV9YCk7XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCB1dGlsczogVXRpbGl0aWVzID0ge1xuXHRwYXJzZUJvb2xlYW4sXG5cdHBhcnNlTnVtYmVyLFxuXHRwYXJzZVN0cmluZ1xufTtcbiJdfQ==