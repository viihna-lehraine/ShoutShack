// File: server/src/db/main.ts
import { env } from '../config/env.js';
import pkg from 'pg';
const { Client } = pkg;
const connectDB = async () => {
    const client = new Client({
        user: env.POSTGRES_USER,
        host: env.POSTGRES_HOST,
        database: env.POSTGRES_DB,
        password: env.POSTGRES_PASSWORD,
        port: env.POSTGRES_PORT
    });
    for (let i = 0; i < 10; i++) {
        try {
            console.log(`Connecting to database... Attempt ${i + 1} out of 10`);
            await client.connect();
            console.log('Database connected successfully.');
            return client;
        }
        catch (err) {
            console.error('Database connection failed:', err);
            await new Promise(res => setTimeout(res, 3000));
        }
    }
    throw new Error('Could not connect to Postgres after 10 attempts.');
};
// export promise instead of awaiting it
export const dbClientPromise = connectDB();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYi9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkMsT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDO0FBRXJCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFFdkIsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUM7UUFDekIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxhQUFhO1FBQ3ZCLElBQUksRUFBRSxHQUFHLENBQUMsYUFBYTtRQUN2QixRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVc7UUFDekIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUI7UUFDL0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxhQUFhO0tBQ3ZCLENBQUMsQ0FBQztJQUVILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUM7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwRSxNQUFNLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7WUFFaEQsT0FBTyxNQUFNLENBQUM7UUFDZixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbEQsTUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUM7QUFFRix3Q0FBd0M7QUFDeEMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUF3QixTQUFTLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNlcnZlci9zcmMvZGIvbWFpbi50c1xuXG5pbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9jb25maWcvZW52LmpzJztcbmltcG9ydCBwa2cgZnJvbSAncGcnO1xuXG5jb25zdCB7IENsaWVudCB9ID0gcGtnO1xuXG5jb25zdCBjb25uZWN0REIgPSBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoe1xuXHRcdHVzZXI6IGVudi5QT1NUR1JFU19VU0VSLFxuXHRcdGhvc3Q6IGVudi5QT1NUR1JFU19IT1NULFxuXHRcdGRhdGFiYXNlOiBlbnYuUE9TVEdSRVNfREIsXG5cdFx0cGFzc3dvcmQ6IGVudi5QT1NUR1JFU19QQVNTV09SRCxcblx0XHRwb3J0OiBlbnYuUE9TVEdSRVNfUE9SVFxuXHR9KTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc29sZS5sb2coYENvbm5lY3RpbmcgdG8gZGF0YWJhc2UuLi4gQXR0ZW1wdCAke2kgKyAxfSBvdXQgb2YgMTBgKTtcblx0XHRcdGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XG5cdFx0XHRjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdGVkIHN1Y2Nlc3NmdWxseS4nKTtcblxuXHRcdFx0cmV0dXJuIGNsaWVudDtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOicsIGVycik7XG5cdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXMgPT4gc2V0VGltZW91dChyZXMsIDMwMDApKTtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjb25uZWN0IHRvIFBvc3RncmVzIGFmdGVyIDEwIGF0dGVtcHRzLicpO1xufTtcblxuLy8gZXhwb3J0IHByb21pc2UgaW5zdGVhZCBvZiBhd2FpdGluZyBpdFxuZXhwb3J0IGNvbnN0IGRiQ2xpZW50UHJvbWlzZTogUHJvbWlzZTxwa2cuQ2xpZW50PiA9IGNvbm5lY3REQigpO1xuIl19